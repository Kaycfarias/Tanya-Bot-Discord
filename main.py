import os
import sys
import logging
import asyncio
from pathlib import Path
from dotenv import load_dotenv

import discord
from discord.ext import commands

from assets.loader.cogsloader import cogsLoader
from assets.translations.translator import myCustomTranslator

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)

# Logging do discord em n√≠vel INFO (inclui confirma√ß√£o de voz)
logging.getLogger('discord.client').setLevel(logging.INFO)

# Carregar vari√°veis de ambiente
load_dotenv()

# Validar configura√ß√µes necess√°rias
TOKEN = os.getenv("TOKEN")
CHATGPT_KEY = os.getenv("CHATGPT_KEY")

if not TOKEN:
    logging.error("TOKEN n√£o encontrado no arquivo .env")
    sys.exit(1)


class TanyaBot(commands.Bot):
    """
    Classe principal do bot Tanya.
    Bot especializado em cria√ß√£o de embeds e modera√ß√£o.
    """
    
    def __init__(self):
        # Configurar intents necess√°rios
        intents = discord.Intents.default()
        intents.message_content = True
        intents.members = True
        intents.guilds = True
        intents.voice_states = True  # Para funcionalidades de voz
        
        super().__init__(
            command_prefix=">>",
            case_insensitive=True,
            intents=intents,
            help_command=None,
            description="Bot especializado em cria√ß√£o de embeds e modera√ß√£o",
        )
        
        # Logger para esta classe
        self.logger = logging.getLogger(__name__)
        
        # Configura√ß√µes do bot
        self.chatgpt_key = CHATGPT_KEY
        self.version = "2.0.0"
        
    async def setup_hook(self):
        """Hook executado durante a inicializa√ß√£o do bot."""
        try:
            self.logger.info("üöÄ Iniciando bot Tanya...")
            
            # Configurar tradutor
            translator = myCustomTranslator()
            await self.tree.set_translator(translator)
            self.logger.info("‚úÖ Sistema de tradu√ß√£o configurado")
            
            # Carregar componentes
            success = await cogsLoader(self)
            if not success:
                self.logger.error("‚ùå Falha ao carregar componentes")
                return
                
            self.logger.info("‚úÖ Componentes carregados com sucesso")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro durante setup_hook: {e}")
            raise
        
    async def close(self):
        """Cleanup quando o bot est√° sendo desligado."""
        self.logger.info("üëã Desligando bot...")
        await super().close()

    def run_bot(self):
        """Executa o bot com tratamento de erros."""
        try:
            self.run(TOKEN, log_handler=None)  # Usar nosso logging customizado
        except discord.LoginFailure:
            self.logger.error("‚ùå Token inv√°lido! Verifique o arquivo .env")
            sys.exit(1)
        except discord.PrivilegedIntentsRequired:
            self.logger.error("‚ùå Intents privilegiados necess√°rios! Configure no Discord Developer Portal")
            sys.exit(1)
        except Exception as e:
            self.logger.error(f"‚ùå Erro inesperado: {e}")
            sys.exit(1)


def main():
    """Fun√ß√£o principal para inicializar o bot."""
    # Verificar vers√£o do Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio!")
        sys.exit(1)
    
    # Verificar se estamos no diret√≥rio correto
    if not Path("components").exists():
        logging.error("‚ùå Diret√≥rio 'components' n√£o encontrado!")
        logging.error("Execute o bot a partir do diret√≥rio raiz do projeto")
        sys.exit(1)
    
    # Criar e executar o bot
    logging.info("üöÄ Inicializando Tanya Bot...")
    
    try:
        bot = TanyaBot()
        bot.run_bot()
    except KeyboardInterrupt:
        logging.info("üëã Bot interrompido pelo usu√°rio")
    except Exception as e:
        logging.error(f"‚ùå Erro fatal durante execu√ß√£o: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()